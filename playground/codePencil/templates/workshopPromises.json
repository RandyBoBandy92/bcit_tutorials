{
  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div hidden class=\"promise-example-1\">\n        <button id=\"click\">Click</button>\n        <p>Promise Output:</p>\n        <h1 id=\"output\"></h1>\n    </div>\n    <div class=\"promise-example-2\">\n        <h1>The amazing is-your-number-odd-or-even-checker</h1>\n        <input id=\"number-input\" placeholder=\"enter a number\" type=\"text\">\n        <button id=\"start-promise\">RUN</button>\n        <h2>Output: <span id=\"promise-output\"></span></h2>\n    </div>\n</body>\n\n</html>",
  "css": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: 'Arial', sans-serif;\n}\n\nbody {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #f3f4f7;\n  color: #333;\n}\n\nh1, h2 {\n  font-weight: 700;\n  color: #333;\n}\n\n.promise-example-1,\n.promise-example-2 {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 900px;\n  padding: 30px;\n  margin: 20px;\n  background-color: #ffffff;\n  border-radius: 10px;\n  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.promise-example-1[hidden] {\n  display: none;\n}\n\n.promise-example-1:hover,\n.promise-example-2:hover {\n  transform: scale(1.02);\n  box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);\n}\n\nh1 {\n  font-size: 1.8rem;\n  margin-bottom: 10px;\n  text-align: center;\n  color: #444;\n}\n\nh2 {\n  font-size: 1.2rem;\n  margin-top: 20px;\n}\n\ninput[type=\"text\"] {\n  padding: 10px;\n  margin-top: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  width: 100%;\n  font-size: 1rem;\n  outline: none;\n  transition: border-color 0.3s ease;\n}\n\ninput[type=\"text\"]:focus {\n  border-color: #007bff;\n}\n\nbutton {\n  padding: 12px 20px;\n  margin-top: 15px;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: #fff;\n  font-size: 1rem;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.1s ease;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n  transform: translateY(-2px);\n}\n\nbutton:active {\n  background-color: #003f82;\n}\n\n#output,\n#promise-output {\n  font-size: 1.5rem;\n  color: #333;\n  margin-top: 10px;\n  font-weight: 600;\n}\n",
  "js": "// Promises\n\nconst output = document.getElementById(\"output\");\n\n// Synchronous => 1 thing happening after another => In Sequence\n\n// Asynchronous => out of sequence\n\nconst nameIwant = \"Randy\";\nconst promise = new Promise(function (resolve, reject) {\n  if (nameIwant === \"Randy\") {\n    resolve(nameIwant); // THIS GOES IN TO .THEN\n  } else {\n    reject(\"WRONG NAME!\"); // THIS GOES IN TO .CATCH\n  }\n});\n\npromise\n  .then(function (resolvedData) {\n    // resolvedData IS nameIwant => \"Randy\"\n    output.innerText = resolvedData;\n  })\n  .catch(function (rejectedData) {\n    // rejectedData IS \"WRONG NAME!\"\n    alert(rejectedData);\n    // throw new Error(rejectedData);\n  });\n\n// this function takes in a number\nconst oddNumbersOnlyPromise = (num) => {\n  // it will then RETURN A PROMISE\n  return new Promise((resolve, reject) => {\n    // this promise starts a timeout.. meaning it will not resolve or reject\n    // right away\n    setTimeout(() => {\n      // even numbers get resolved => into .then\n      if (num % 2 === 0) {\n        resolve(`${num} is even`);\n      } else {\n        // odd numbers get rejected => into .catch\n        reject(`${num} is odd`);\n      }\n      // because we have a 1000ms or 1 second delay, it will not resolve or reject\n      // until 1 second after the function is called\n    }, 1000);\n  });\n};\n\nconst numberInput = document.getElementById(\"number-input\");\nconst runBtn = document.getElementById(\"start-promise\");\nconst promiseOutput = document.getElementById(\"promise-output\");\n\nrunBtn.addEventListener(\"click\", function () {\n  // grab whatever the value inside numberInput currently is\n  const numberToCheck = numberInput.value;\n  // this will show loading for around 1 second, before\n  // changing to either the value coming from\n  // .then or .catch\n  promiseOutput.innerText = \"Loading...\";\n  oddNumbersOnlyPromise(numberToCheck)\n    .then((response) => {\n      promiseOutput.innerText = response;\n    })\n    .catch((response) => {\n      promiseOutput.innerText = response;\n    });\n});\n"
}