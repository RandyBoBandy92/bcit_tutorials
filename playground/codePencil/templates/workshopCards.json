{
  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div class=\"deck-container\"></div>\n    <div class=\"card-container\"></div>\n</body>\n\n</html>",
  "css": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n.deck-container {\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin-bottom: 3rem;\n}\n\n.deck-container > * {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.no-cards-left {\n  width: 200px;\n  height: 300px;\n  background-color: #f1f1f1;\n  border-radius: 5px;\n  margin: 10px;\n  font-size: 1.5rem;\n  /* wanna have some kind of nice border effect around the card */\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  display: block;\n  background-color: #e5e5f7;\n  opacity: 0.8;\n  background-image: radial-gradient(circle at center center, #444cf7, #e5e5f7),\n    repeating-radial-gradient(\n      circle at center center,\n      #444cf7,\n      #444cf7,\n      10px,\n      transparent 20px,\n      transparent 10px\n    );\n  background-blend-mode: multiply;\n  opacity: 0.4;\n}\n\n.card-container {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.card {\n  width: 200px;\n  height: 300px;\n  background-color: #f1f1f1;\n  border-radius: 5px;\n  margin: 10px;\n  font-size: 1.5rem;\n  /* wanna have some kind of nice border effect around the card */\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n.red {\n  color: red;\n}\n\n.black {\n  color: black;\n}\n\n.card-face {\n  height: 100%;\n  width: 100%;\n}\n\n.card-front {\n  position: relative;\n  display: none;\n}\n\n.card-back {\n  display: none;\n  background-color: #e5e5f7;\n  opacity: 0.8;\n  background-image: radial-gradient(circle at center center, #444cf7, #e5e5f7),\n    repeating-radial-gradient(\n      circle at center center,\n      #444cf7,\n      #444cf7,\n      10px,\n      transparent 20px,\n      transparent 10px\n    );\n  background-blend-mode: multiply;\n}\n\n.top-left {\n  position: absolute;\n  top: 8px;\n  left: 16px;\n}\n\n.bottom-right {\n  position: absolute;\n  bottom: 8px;\n  right: 16px;\n}\n\n.card-center-value {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 3rem;\n  font-weight: bold;\n}\n\n.active {\n  display: block;\n}\n",
  "js": "class Deck {\n  constructor() {\n    this.suits = [\n      {\n        name: \"spade\",\n        image: \"♠\",\n        color: \"black\",\n      },\n      {\n        name: \"heart\",\n        image: \"♥\",\n        color: \"red\",\n      },\n      {\n        name: \"club\",\n        image: \"♣\",\n        color: \"black\",\n      },\n      {\n        name: \"diamond\",\n        image: \"♦\",\n        color: \"red\",\n      },\n    ];\n    this.cards = [];\n    this.highestZIndex = 1;\n    this.deal.bind(this);\n    this.createCards();\n    this.shuffle();\n  }\n  createCards() {\n    for (let suit of this.suits) {\n      for (let i = 1; i <= 13; i++) {\n        let value = i;\n        if (i === 1 || i > 10) {\n          switch (i) {\n            case 1:\n              value = \"A\";\n              break;\n            case 11:\n              value = \"J\";\n              break;\n            case 12:\n              value = \"Q\";\n              break;\n            case 13:\n              value = \"K\";\n              break;\n            default:\n              break;\n          }\n        }\n        this.cards.push(new Card(value, suit, this));\n      }\n    }\n  }\n  shuffle() {\n    for (let i = this.cards.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];\n    }\n  }\n  deal(cards = 1) {\n    // if we have no cards left, do nothing\n    if (this.cards.length === 0) {\n      alert(\"No more cards left!\");\n      return;\n    }\n\n    // if we are trying to deal more cards than we have left, just deal the rest\n    if (cards > this.cards.length) {\n      cards = this.cards.length;\n    }\n\n    // do a loop for the number of cards we are trying to deal\n    // but we need to start with i = 1, and go up to i = cards\n\n    for (let i = 0; i < cards; i++) {\n      // shift the first card off the deck\n      const card = this.cards.shift();\n      // call its renderCard method\n      card.renderCard();\n      // if we have 3 or fewer cards left, grab the deck container, and remove the last child\n      if (this.cards.length <= 2) {\n        const deckContainer = document.querySelector(\".deck-container\");\n        if (deckContainer.lastChild) {\n          deckContainer.removeChild(deckContainer.lastChild);\n        }\n        // if there are no children left, add an element with a class\n        // of \"no-cards-left\"\n        if (deckContainer.children.length === 0) {\n          const noCardsLeft = document.createElement(\"div\");\n          noCardsLeft.classList.add(\"no-cards-left\");\n          deckContainer.appendChild(noCardsLeft);\n        }\n      }\n    }\n  }\n  renderDeck() {\n    const deckContainer = document.querySelector(\".deck-container\");\n    // create 3 cards, flip them, and append them to the deck container\n    for (let i = 0; i < 3; i++) {\n      const card = new Card(\"A\", this.suits[0], this);\n      card.flipCard();\n      // each one should have a left offset 20px more than the previous one\n      card.element.style.left = `${20 * i}px`;\n      // remove all event listeners\n      card.element.onclick = null;\n\n      deckContainer.appendChild(card.element);\n    }\n    // clicking on the deck container should deal a card\n    deckContainer.onclick = this.deal.bind(this, 1);\n  }\n}\n\nclass Card {\n  constructor(value, suit, deck) {\n    this.value = value;\n    this.suit = suit;\n    this.deck = deck;\n    this.element = this.createCardElement();\n  }\n  createCardElement() {\n    const card = document.createElement(\"div\");\n    card.classList.add(\"card\");\n    card.classList.add(this.suit.color);\n    // add a draggable attribute\n    card.setAttribute(\"draggable\", true);\n    card.innerHTML = `\n        <div id=\"${this.suit.name}-${this.value}\" class=\"card-face card-front active\">\n            <span class=\"top-left\">\n                <span class=\"card-value\">${this.value}</span>\n                <span class=\"card-suit\">${this.suit.image}</span>\n            </span>\n            <span class=\"bottom-right\">\n                <span class=\"card-value\">${this.value}</span>\n                <span class=\"card-suit\">${this.suit.image}</span>\n            </span>\n            <span class=\"card-center-value\">${this.value}</span>\n        </div>\n        <div class=\"card-face card-back\"></div>\n        `;\n    // card.addEventListener(\"dragstart\", this.dragstartHandler.bind(this));\n    // card.addEventListener(\"drag\", this.dragHandler.bind(this));\n    // card.addEventListener(\"dragend\", this.dragendHandler.bind(this));\n    card.onclick = this.flipCard.bind(this);\n    return card;\n  }\n\n  dragstartHandler(event) {\n    const { target } = event;\n    console.log(\"dragstart\");\n    event.dataTransfer.setData(\"text/html\", target.outerHTML);\n    // no drag image\n    event.dataTransfer.setDragImage(new Image(), 0, 0);\n    // set the z-index of the card to be the highest\n    target.style.zIndex = this.deck.highestZIndex;\n    this.deck.highestZIndex++;\n  }\n\n  dragHandler(event) {\n    const { target } = event;\n    console.log(\"drag\");\n    // get the X and Y coordinates of the mouse\n    const { clientX, clientY } = event;\n    // using absolute positioning, move the card to the mouse coordinates\n    target.style.position = \"absolute\";\n    target.style.left = `${clientX}px`;\n    target.style.top = `${clientY}px`;\n    // translate left by half the width of the card\n    target.style.transform = \"translate(-50%, -50%)\";\n  }\n\n  dragendHandler(event) {\n    const { target } = event;\n    console.log(\"dragend\");\n    // set left and top to wherever the mouse was when the drag ended\n    const { clientX, clientY } = event;\n    target.style.left = `${clientX}px`;\n    target.style.top = `${clientY}px`;\n  }\n\n  renderCard() {\n    const cardContainer = document.querySelector(\".card-container\");\n    cardContainer.appendChild(this.element);\n  }\n  flipCard() {\n    this.element.querySelectorAll(\".card-face\").forEach((face) => {\n      face.classList.toggle(\"active\");\n    });\n  }\n}\n\nconst deck = new Deck();\ndeck.renderDeck();\n// deck.deal(48);\n"
}